"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _server = _interopRequireDefault(require("react-dom/server"));

var _testUtils = _interopRequireDefault(require("react-dom/test-utils"));

var _shallow = _interopRequireDefault(require("react-test-renderer/shallow"));

var _object = _interopRequireDefault(require("object.values"));

var _reactIs = require("react-is");

var _enzyme = require("enzyme");

var _enzymeAdapterUtils = require("enzyme-adapter-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function compositeTypeToNodeType(type) {
  switch (type) {
    case 0:
    case 1:
      return 'class';

    case 2:
      return 'function';

    default:
      throw new Error("Enzyme Internal Error: unknown composite type ".concat(type));
  }
}

function childrenFromInst(inst, el) {
  if (inst._renderedChildren) {
    return (0, _object["default"])(inst._renderedChildren);
  }

  if (el.props) {
    return (0, _object["default"])({
      '.0': el.props.children
    });
  }

  return [];
}

function nodeType(inst) {
  if (inst._compositeType != null) {
    return compositeTypeToNodeType(inst._compositeType);
  }

  return 'host';
}

function instanceToTree(inst) {
  if (!inst || _typeof(inst) !== 'object') {
    return inst;
  }

  var el = inst._currentElement;

  if (el == null || el === false) {
    return null;
  }

  if (_typeof(el) !== 'object') {
    return el;
  }

  if (inst._renderedChildren) {
    return {
      nodeType: nodeType(inst),
      type: el.type,
      props: el.props,
      key: (0, _enzymeAdapterUtils.ensureKeyOrUndefined)(el.key),
      ref: el.ref,
      instance: inst._instance || inst._hostNode || null,
      rendered: (0, _object["default"])(inst._renderedChildren).map(instanceToTree)
    };
  }

  if (inst._hostNode) {
    return {
      nodeType: 'host',
      type: el.type,
      props: el.props,
      key: (0, _enzymeAdapterUtils.ensureKeyOrUndefined)(el.key),
      ref: el.ref,
      instance: inst._instance || inst._hostNode || null,
      rendered: childrenFromInst(inst, el).map(instanceToTree)
    };
  }

  if (inst._renderedComponent) {
    return {
      nodeType: nodeType(inst),
      type: el.type,
      props: el.props,
      key: (0, _enzymeAdapterUtils.ensureKeyOrUndefined)(el.key),
      ref: el.ref,
      instance: inst._instance || inst._hostNode || null,
      rendered: instanceToTree(inst._renderedComponent)
    };
  }

  return {
    nodeType: nodeType(inst),
    type: el.type,
    props: el.props,
    key: (0, _enzymeAdapterUtils.ensureKeyOrUndefined)(el.key),
    ref: el.ref,
    instance: inst._instance || null,
    rendered: childrenFromInst(inst, el).map(instanceToTree)
  };
}

var eventOptions = {
  animation: true
};

var ReactFifteenAdapter = /*#__PURE__*/function (_EnzymeAdapter) {
  _inherits(ReactFifteenAdapter, _EnzymeAdapter);

  var _super = _createSuper(ReactFifteenAdapter);

  function ReactFifteenAdapter() {
    var _this;

    _classCallCheck(this, ReactFifteenAdapter);

    _this = _super.call(this);
    var lifecycles = _this.options.lifecycles;
    _this.options = _objectSpread(_objectSpread({}, _this.options), {}, {
      supportPrevContextArgumentOfComponentDidUpdate: true,
      // TODO: remove, semver-major
      legacyContextMode: 'parent',
      lifecycles: _objectSpread(_objectSpread({}, lifecycles), {}, {
        componentDidUpdate: {
          prevContext: true
        },
        getChildContext: {
          calledByRenderer: true
        }
      })
    });
    return _this;
  }

  _createClass(ReactFifteenAdapter, [{
    key: "createMountRenderer",
    value: function createMountRenderer(options) {
      (0, _enzymeAdapterUtils.assertDomAvailable)('mount');
      var domNode = options.attachTo || global.document.createElement('div');
      var instance = null;
      var adapter = this;
      return {
        render: function render(el, context, callback) {
          if (instance === null) {
            var type = el.type,
                props = el.props,
                ref = el.ref;

            var wrapperProps = _objectSpread({
              Component: type,
              wrappingComponentProps: options.wrappingComponentProps,
              props: props,
              context: context
            }, ref && {
              refProp: ref
            });

            var ReactWrapperComponent = (0, _enzymeAdapterUtils.createMountWrapper)(el, _objectSpread(_objectSpread({}, options), {}, {
              adapter: adapter
            }));

            var wrappedEl = /*#__PURE__*/_react["default"].createElement(ReactWrapperComponent, wrapperProps);

            instance = _reactDom["default"].render(wrappedEl, domNode);

            if (typeof callback === 'function') {
              callback();
            }
          } else {
            instance.setChildProps(el.props, context, callback);
          }
        },
        unmount: function unmount() {
          _reactDom["default"].unmountComponentAtNode(domNode);

          instance = null;
        },
        getNode: function getNode() {
          if (!instance) {
            return null;
          }

          return (0, _enzymeAdapterUtils.getNodeFromRootFinder)(adapter.isCustomComponent, instanceToTree(instance._reactInternalInstance), options);
        },
        simulateEvent: function simulateEvent(node, event, mock) {
          var mappedEvent = (0, _enzymeAdapterUtils.mapNativeEventNames)(event, eventOptions);
          var eventFn = _testUtils["default"].Simulate[mappedEvent];

          if (!eventFn) {
            throw new TypeError("ReactWrapper::simulate() event '".concat(event, "' does not exist"));
          } // eslint-disable-next-line react/no-find-dom-node


          eventFn(_reactDom["default"].findDOMNode(node.instance), mock);
        },
        batchedUpdates: function batchedUpdates(fn) {
          return _reactDom["default"].unstable_batchedUpdates(fn);
        },
        getWrappingComponentRenderer: function getWrappingComponentRenderer() {
          return _objectSpread(_objectSpread({}, this), (0, _enzymeAdapterUtils.getWrappingComponentMountRenderer)({
            toTree: function toTree(inst) {
              return instanceToTree(inst._reactInternalInstance);
            },
            getMountWrapperInstance: function getMountWrapperInstance() {
              return instance;
            }
          }));
        }
      };
    }
  }, {
    key: "createShallowRenderer",
    value: function createShallowRenderer()
    /* options */
    {
      var renderer = new _shallow["default"]();
      var isDOM = false;
      var cachedNode = null;
      return {
        render: function render(el, context) {
          cachedNode = el;
          /* eslint consistent-return: 0 */

          if (typeof el.type === 'string') {
            isDOM = true;
          } else {
            isDOM = false;
            return (0, _enzymeAdapterUtils.withSetStateAllowed)(function () {
              return renderer.render(el, context);
            });
          }
        },
        unmount: function unmount() {
          renderer.unmount();
        },
        getNode: function getNode() {
          if (isDOM) {
            return (0, _enzymeAdapterUtils.elementToTree)(cachedNode);
          }

          var output = renderer.getRenderOutput();
          return {
            nodeType: compositeTypeToNodeType(renderer._instance._compositeType),
            type: cachedNode.type,
            props: cachedNode.props,
            key: (0, _enzymeAdapterUtils.ensureKeyOrUndefined)(cachedNode.key),
            ref: cachedNode.ref,
            instance: renderer._instance._instance,
            rendered: (0, _enzymeAdapterUtils.elementToTree)(output)
          };
        },
        simulateEvent: function simulateEvent(node, event) {
          for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            args[_key - 2] = arguments[_key];
          }

          var handler = node.props[(0, _enzymeAdapterUtils.propFromEvent)(event, eventOptions)];

          if (handler) {
            (0, _enzymeAdapterUtils.withSetStateAllowed)(function () {
              // TODO(lmr): create/use synthetic events
              // TODO(lmr): emulate React's event propagation
              renderer.unstable_batchedUpdates(function () {
                handler.apply(void 0, args);
              });
            });
          }
        },
        batchedUpdates: function batchedUpdates(fn) {
          return (0, _enzymeAdapterUtils.withSetStateAllowed)(function () {
            return renderer.unstable_batchedUpdates(fn);
          });
        }
      };
    }
  }, {
    key: "createStringRenderer",
    value: function createStringRenderer(options) {
      return {
        render: function render(el, context) {
          if (options.context && (el.type.contextTypes || options.childContextTypes)) {
            var childContextTypes = _objectSpread(_objectSpread({}, el.type.contextTypes || {}), options.childContextTypes);

            var ContextWrapper = (0, _enzymeAdapterUtils.createRenderWrapper)(el, context, childContextTypes);
            return _server["default"].renderToStaticMarkup( /*#__PURE__*/_react["default"].createElement(ContextWrapper));
          }

          return _server["default"].renderToStaticMarkup(el);
        }
      };
    } // Provided a bag of options, return an `EnzymeRenderer`. Some options can be implementation
    // specific, like `attach` etc. for React, but not part of this interface explicitly.
    // eslint-disable-next-line class-methods-use-this, no-unused-vars

  }, {
    key: "createRenderer",
    value: function createRenderer(options) {
      switch (options.mode) {
        case _enzyme.EnzymeAdapter.MODES.MOUNT:
          return this.createMountRenderer(options);

        case _enzyme.EnzymeAdapter.MODES.SHALLOW:
          return this.createShallowRenderer(options);

        case _enzyme.EnzymeAdapter.MODES.STRING:
          return this.createStringRenderer(options);

        default:
          throw new Error("Enzyme Internal Error: Unrecognized mode: ".concat(options.mode));
      }
    }
  }, {
    key: "wrap",
    value: function wrap(element) {
      return (0, _enzymeAdapterUtils.wrap)(element);
    } // converts an RSTNode to the corresponding JSX Pragma Element. This will be needed
    // in order to implement the `Wrapper.mount()` and `Wrapper.shallow()` methods, but should
    // be pretty straightforward for people to implement.
    // eslint-disable-next-line class-methods-use-this, no-unused-vars

  }, {
    key: "nodeToElement",
    value: function nodeToElement(node) {
      if (!node || _typeof(node) !== 'object') return null;
      return /*#__PURE__*/_react["default"].createElement(node.type, (0, _enzymeAdapterUtils.propsWithKeysAndRef)(node));
    }
  }, {
    key: "elementToNode",
    value: function elementToNode(element) {
      return (0, _enzymeAdapterUtils.elementToTree)(element);
    }
  }, {
    key: "nodeToHostNode",
    value: function nodeToHostNode(node) {
      return _reactDom["default"].findDOMNode(node.instance);
    }
  }, {
    key: "displayNameOfNode",
    value: function displayNameOfNode(node) {
      return (0, _enzymeAdapterUtils.displayNameOfNode)(node);
    }
  }, {
    key: "isValidElement",
    value: function isValidElement(element) {
      return (0, _reactIs.isElement)(element);
    }
  }, {
    key: "isValidElementType",
    value: function isValidElementType(object) {
      return (0, _reactIs.isValidElementType)(object);
    }
  }, {
    key: "isCustomComponent",
    value: function isCustomComponent(component) {
      return typeof component === 'function';
    }
  }, {
    key: "createElement",
    value: function createElement() {
      return /*#__PURE__*/_react["default"].createElement.apply(_react["default"], arguments);
    }
  }, {
    key: "invokeSetStateCallback",
    value: function invokeSetStateCallback(instance, callback) {
      // React in >= 15.4, and < 16 pass undefined to a setState callback
      callback.call(instance, undefined);
    }
  }, {
    key: "wrapWithWrappingComponent",
    value: function wrapWithWrappingComponent(node, options) {
      return {
        RootFinder: _enzymeAdapterUtils.RootFinder,
        node: (0, _enzymeAdapterUtils.wrapWithWrappingComponent)(_react["default"].createElement, node, options)
      };
    }
  }]);

  return ReactFifteenAdapter;
}(_enzyme.EnzymeAdapter);

module.exports = ReactFifteenAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=ReactFifteenAdapter.js.map